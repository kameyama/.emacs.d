#+title Emacs Configration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+STARTUP: fold


emacsのinit.elをorg-modeを使って管理する. saveすると自動的にemacs-lisp code block内のコードがinit.elにinit.elが生成される. 


* Packege System

** General

   パッケージをリポジトリに追加する.
   
   #+begin_src emacs-lisp
    ;; init.el is created from emacs.org which emacs settings.
    ;; Do NOT modify this file.

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
				 ("melpa-stable" . "https://stable.melpa.org/packages/")
				 ("org" . "https://orgmode.org/elpa/")
				 ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
	  (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless  (package-installed-p 'use-package)
      (package-install 'use-package))


   #+end_src

   
*** [[https://github.com/jwiegley/use-package][use-packege]]

    パッケージの使用を可読性高く書くことができるマクロ. [[https://github.com/conao3/leaf.el][leaf]]というuse-packageの代替パッケージが存在する. こっちの方がモダンかも.
    
  #+begin_src emacs-lisp
    (require 'use-package)
  #+end_src
   
**** usage
     (require 'パッケージ名)の代わりに(use-package パッケージ名)でパッケージを使うことができる. キーワード引数使うこともできる. 
     
     :init is executed before a package is loaded.
     :config is executed after apackage is loaded.
     :bind defines key-bindngs.
     :bind-keymap
     :mode
     :defer
     :interpreter
     :magic
     :hook
     :commands
     :custom allows customazation of packegee custom variables.
     :custom-face
     :if
     :endure
     :after
     :load-path
     :requires
     :no-require
     :defines

     
***** fast startup
      requireでpackageを使う場合autoloadで遅延ロードできる. use-packageの場合は:commands, :bind, :mode, :interpreter, :deferで設定される項目が遅延ロードされる. 
      
**** others
  #+begin_src emacs-lisp

    ;; On non-Guix systems, "ensure" packages by default
    (setq use-package-always-ensure t)
    (use-package quelpa)

    (use-package no-littering)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  #+end_src

  
** Package Updates

   #+begin_src emacs-lisp
     (use-package auto-package-update
       :custom
       (auto-package-update-interval 7)
       (auto-package-update-prompt-before-update t)
       (auto-package-update-hide-results t)
       :config
       (auto-package-update-maybe)
       (auto-package-update-at-time "09:00"))
   #+end_src

** Shell Path
   emacs does not load shell path by default.
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+end_src
   

* Emacs General Settings
  
** UI
   
  #+begin_src emacs-lisp
    ;; Thanks, but no thanks
    (setq inhibit-startup-message t)

    ;;(scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)       ; Give some breathing room
    (menu-bar-mode -1)            ; Disable the menu bar

    ;; Set up the visible bell
    (setq visible-bell t)

    ;; show line numb
    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Override some modes which derive from the above
    (dolist (mode '(org-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

  #+end_src

** Keybinding

   #+begin_src emacs-lisp

     ;;ESC Cancels All
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

     (use-package general
       :config
       (general-create-definer rune/leader-keys
	 :keymaps '(normal insert visual emacs)
	 :prefix "SPC"
	 :global-prefix "C-SPC")

       ;; (leader-keys
       ;; 	 "t" '(:ignore t :which-key "toggles")
       ;; 	 "tt" '(counsel-load-theme :which-key "choose theme")))


           (global-set-key (kbd "C-M-j") 'counsel-switch-buffer))

   #+end_src
  
** Theme
   
  #+begin_src emacs-lisp

    (use-package doom-themes
      :config
      (load-theme 'doom-dracula t))

    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src

** Modeline
   
  #+begin_src emacs-lisp
     (use-package all-the-icons)

	  (use-package doom-modeline
	    :ensure t
	    :init (doom-modeline-mode 1)
	    :custom ((doom-modeline-hight 15))
	    )

  #+end_src

** Which Kye
   
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))

   #+end_src

** Ivy

   #+begin_src emacs-lisp

     (use-package ivy
       :diminish
       :bind (("C-s" . swiper)
	      :map ivy-minibuffer-map
	      ("TAB" . ivy-alt-done)
	      ("C-f" . ivy-alt-done)
	      ("C-l" . ivy-alt-done)
	      ("C-j" . ivy-next-line)
	      ("C-k" . ivy-previous-line)
	      :map ivy-switch-buffer-map
	      ("C-k" . ivy-previous-line)
	      ("C-l" . ivy-done)
	      ("C-d" . ivy-switch-buffer-kill)
	      :map ivy-reverse-i-search-map
	      ("C-k" . ivy-previous-line)
	      ("C-d" . ivy-reverse-i-search-kill))
       :config
       (ivy-mode t))

     (use-package ivy-rich
       :init
       (ivy-rich-mode 1)
       )
   #+end_src

** Counsel
   #+begin_src emacs-lisp

     (use-package counsel
     :init
     (setq-default dired-omit-files-p t)
     (setq dired-omit-files "^\\.DS_Store")
     (setq counsel-find-file-ignore-regexp (regexp-opt '(".DS_Store")))
     
     :bind (
     ("M-x" . counsel-M-x)
     ("C-x b" . counsel-ibuffer)
     ("C-x C-f" . counsel-find-file)
     ;; ("C-M-j" . counsel-switch-buffer)
     ("C-M-l" . counsel-imenu)
     :map minibuffer-local-map
     ("C-r" . 'counsel-minibuffer-history))
     )
   #+end_src


  
** Dired

   #+begin_src emacs-lisp
     (use-package dired			
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :config
       ;; (evil-collection-define-key 'normal 'dired-mode-map
       ;;   "h" 'dired-up-directory
       ;;   "l" 'dired-find-file)
       )

   #+end_src
   
** Helpful

   #+begin_src emacs-lisp

     (use-package helpful
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . helpful-function)
       ([remap describe-symbol] . helpful-symbol)
       ([remap describe-variable] . helpful-variable)
       ([remap describe-command] . helpful-command)
       ([remap describe-key] . helpful-key))


   #+end_src

** Text Scalling

   #+begin_src emacs-lisp

     (use-package hydra)

     ;; (defhydra hydra-text-scale (:timeout 4)
     ;;   ("j" text-scale-increase "in")
     ;;   ("k" text-scale-decrease "out")
     ;;   ("f" nil "finished" :exit t)
     ;;   )

     ;; (rune/leader-keys
     ;;   "ts" '(hydra-text-scale/body :which-key "scale text"))
   #+end_src
 
** Font
   
  #+begin_src emacs-lisp

    ;; font setting
    ;;(set-face-attribute 'default nil :font "Fira Mono" :height 280)
    ;;(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 295 :wigth 'regular)
    (set-face-attribute 'default nil :height 150)
   #+end_src

** Evil

  #+begin_src emacs-lisp

    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      ;; (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      ;; cursor colors
      (setq evil-normal-state-cursor '("cyan" box)) 
      (setq evil-emacs-state-cursor '("orange" box))

      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

      ;; global  
      ;; Use visual line motions even outside of visual-line-mode buffers
      ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)


      ;; emacs state
      (define-key evil-emacs-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
      (define-key evil-emacs-state-map (kbd "<escape>") 'evil-normal-state)

      ;; normal state
      ;; C-f, C-b, C-n,C-p bindings in normal state
      (define-key evil-normal-state-map (kbd "C-f") 'evil-forward-char) ; C-f is evil-scroll-page-down by default
      (define-key evil-normal-state-map (kbd "C-b") 'evil-backward-char) ; C-b is evil-scroll-page-up by default
      (define-key evil-normal-state-map (kbd "C-n") 'evil-next-visual-line) ; C-n is evil-paste-pop-next by default
      (define-key evil-normal-state-map (kbd "C-p") 'evil-previous-visual-line) ; C-p is evil-paste-pop  by default
      (setq-default evil-cross-lines t) ; Make horizontal movement cross lines

      ;; visual state
      (define-key evil-visual-state-map (kbd "C-f") 'evil-forward-char) ; C-f is evil-scroll-page-down by default
      (define-key evil-visual-state-map (kbd "C-b") 'evil-backward-char) ; C-b is evil-scroll-page-up by default
      (define-key evil-visual-state-map (kbd "C-n") 'evil-next-visual-line) ; C-n is evil-paste-pop-next by default
      (define-key evil-visual-state-map (kbd "C-p") 'evil-previous-visual-line) ; C-p is evil-paste-pop  by default

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))


    (defalias 'evil-insert-state 'evil-emacs-state)


    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
  #+end_src


* Org
  
** Visual Settings

  #+begin_src emacs-lisp

    (use-package org
      ;;  hook (org-mode . dw/org-mode-setup)
      :config
      (org-indent-mode)
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1)

      (setq org-startup-truncated nil)
      (setq evil-auto-indent nil)
      (setq org-ellipsis " ▾"
	    org-hide-emphasis-markers t)
      )

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      ;;(set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
      )

    ;; Make sure org-indent face is available
    (require 'org-indent)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  #+end_src

** Org Babel
   
*** Babel Languages
   
  #+begin_src emacs-lisp
	(with-eval-after-load 'org
	    (org-babel-do-load-languages
	     'org-babel-load-languages
	     '((emacs-lisp . t)
	       (python . t)
	       (shell . t)
	       (lisp . t)
	       (jupyter . t)
	       )
	     )
	(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
	    )

	(setq org-confirm-babel-evaluate nil)
  #+end_src



*** Structure Templates
    
  #+begin_src emacs-lisp
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("jl" . "src julia"))
    (add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
  #+end_src

** Auto tangle
   
  #+begin_src emacs-lisp
    ;; Automatically tangle our Emacs.org config file when we save it
    (defun efs/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
			  (expand-file-name user-emacs-directory))
	;; Dynamic scoping to the rescue
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+end_src


* Develepment

** General

*** Language Server Protcol

   #+begin_src emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :init
       (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
       :config
       (lsp-enable-which-key-integration t))
   #+end_src

*** Header Breadcrumb
   #+begin_src emacs-lisp
     (defun lsp-mode-setup ()
       (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
       (lsp-headerline-breadcrumb-mode)

     :hook (lsp-mode . lsp-mode-setup)
     )
   #+end_src

*** Better Completions with company-mode
    #+begin_src emacs-lisp
      (use-package company
	:after lsp-mode
	:hook (prog-mode . company-mode)
	:bind (:map company-active-map
	       ("C-f" . company-complete-selection))
	      (:map lsp-mode-map
	       ("<tab>" . company-indent-or-complete-common))
	:custom
	(company-minimum-prefix-length 1)
	(company-idle-delay 0.0))

      (use-package company-box
	:hook (company-mode . company-box-mode))

    #+end_src


*** More UI Enhancements lsp-ui-mode
   Enable nice rendering of documentation on hover
   Warning: on some systems this package can reduce your emacs responsiveness significally.
   (See: https://emacs-lsp.github.io/lsp-mode/page/performance/)
   In that case you have to not only disable this but also remove from the packages since
   lsp-mode can activate it automatically.
    #+begin_src emacs-lisp
      (use-package lsp-ui
	:hook (lsp-mode . lsp-ui-mode))
    #+end_src

*** Sideline
    #+begin_src emacs-lisp
      (setq lsp-ui-sideline-enable nil)
      (setq lsp-ui-sideline-show-hover nil)
    #+end_src

*** lsp-treemacs
    #+begin_src emacs-lisp
      (use-package lsp-treemacs
	:after lsp)
    #+end_src

*** Quicker symbol searching with lsp-ivy
    #+begin_src emacs-lisp
      (use-package lsp-ivy)
    #+end_src

*** Commenting lines

    #+begin_src emacs-lisp
      (use-package evil-nerd-commenter
	:bind ("M-/" . evilnc-comment-or-uncomment-lines))
    #+end_src
    
** Languages
   
*** Python

    #+begin_src emacs-lisp
      (use-package python-mode
		  :ensure t
		  :hook (python-mode . lsp-deferred)
		  :custom
		  (python-shell-interpreter "python3"))
    #+end_src

*** Python-docker
    #+begin_src emacs-lisp
      (use-package lsp-docker
	:custom
	(defvar lsp-docker-client-packages '(lsp-clients lsp-bash lsp-pyls))

	(setq lsp-docker-client-configs
	      '((:server-id bash-ls :docker-server-id bashls-docker :server-command "bash-language-server start")
		(:server-id dockerfile-ls :docker-server-id dockerfilels-docker :server-command "docker-langserver --stdio")
		(:server-id pyls :docker-server-id pyls-docker :server-command "pyls")
		))

	(lsp-docker-init-clients
	 :path-mappings '(("path-to-projects-you-want-to-use" . "/projects"))
	 :client-packages lsp-docker-client-packages
	 :client-configs lsp-docker-client-configs)
	)

    #+end_src




*** Julia

    #+begin_src emacs-lisp
      ;; (set-language-environment "UTF-8")

      ;; (require 'eglot)
      ;; (add-hook 'julia-mode-hook 'eglot-ensure)

      ;; (require 'julia-mode)
      ;; (require 'julia-repl)
      ;; (add-hook 'julia-mode-hook 'julia-repl-mode)
      ;; (add-to-list 'eglot-server-programs
      ;;              '(julia-mode . ("julia" "-e using LanguageServer, LanguageServer.SymbolServer; runserver()")))
    #+end_src


    #+begin_src emacs-lisp
      (use-package eglot)
      (add-hook 'julia-mode-hook 'eglot-ensure)
      (use-package julia-mode)
      (require 'julia-repl)
      (add-hook 'julia-mode-hook 'julia-repl-mode)
      (add-to-list 'eglot-server-programs
		   '(julia-mode . ("julia" "-e using LanguageServer, LanguageServer.SymbolServer; runserver()")))
    #+end_src


    
     # #+begin_src emacs-lisp
     #   (use-package lsp-julia
     # 	       :config
     # 	       (setq lsp-julia-default-environment "~/.julia/environments/v1.7"))

     #   (add-hook 'ess-julia-mode-hook #'lsp-mode)
     # #+end_src


    
*** Go
    #+begin_src emacs-lisp
      (use-package go-mode)
    #+end_src

*** Common Lisp
    
    #+begin_src emacs-lisp
      (use-package slime
	:config
	(setq inferior-lisp-program "clisp")
	(setq slime-net-coding-system 'utf-8-unix)
	)
    #+end_src



*** Scala
**** scala-mode for highlighting, indentation and motion commands    
    #+begin_src emacs-lisp
      
      (use-package scala-mode
	:interpreter
	  ("scala" . scala-mode))
    #+end_src

**** Enable sbt mode for executing sbt commands
   #+begin_src emacs-lisp
     (use-package sbt-mode
       :commands sbt-start sbt-command
       :config
       ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
       ;; allows using SPACE when in the minibuffer
       (substitute-key-definition
	'minibuffer-complete-word
	'self-insert-command
	minibuffer-local-completion-map)
	;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
	(setq sbt:program-options '("-Dsbt.supershell=false"))
     )
   #+end_src


**** metals backend for lsp-mode


	    (use-package lsp-metals
	      :ensure t
	      :custom
	      ;; Metals claims to support range formatting by default but it supports range
	      ;; formatting of multiline strings only. You might want to disable it so that
	      ;; emacs can use indentation provided by scala-mode.
	      (lsp-metals-server-args '("-J-Dmetals.allow-multiline-string-formatting=off"))
	      :hook (scala-mode . lsp)
	      )







   
*** yaml
    #+begin_src emacs-lisp
      (use-package yaml-mode)
    #+end_src




*** SQL
    
    require pgformatter. To install it, run next.
    
    #+begin_src shell
      brew install pgformatter
    #+end_src

    
    #+begin_src emacs-lisp
      (use-package sqlformat)
      (setq sqlformat-command 'pgformatter)
      (setq sqlformat-args '("-s2" "-g"))
    #+end_src


*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
	       ("\\.md\\'" . markdown-mode)
	       ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))

      (use-package markdown-preview-mode)
    #+end_src




*** Jupyter
    #+begin_src emacs-lisp
	    (use-package jupyter)
    #+end_src




    

    
*** CSV
    
    #+begin_src emacs-lisp
      (use-package csv-mode)
    #+end_src


*** digdag
    #+begin_src emacs-lisp
      (use-package digdag-mode)
    #+end_src

*** Tex

    #+begin_src emacs-lisp
(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq auto-mode-alist
      (append '(("\\.tex$" . yatex-mode)
                ("\\.ltx$" . yatex-mode)
                ("\\.cls$" . yatex-mode)
                ("\\.sty$" . yatex-mode)
                ("\\.clo$" . yatex-mode)
                ("\\.bbl$" . yatex-mode)) auto-mode-alist))

(setq YaTeX-inhibit-prefix-letter t)
(setq YaTeX-kanji-code nil)
(setq YaTeX-latex-message-code 'utf-8)
(setq YaTeX-use-LaTeX2e t)
(setq YaTeX-use-AMS-LaTeX t)
(setq YaTeX-dvi2-command-ext-alist
      '(("Preview\\|TeXShop\\|TeXworks\\|Skim\\|mupdf\\|xpdf\\|Firefox\\|Adobe" . ".pdf")))

(setq tex-command "/Library/TeX/texbin/ptex2pdf -u -l -ot '-synctex=1'");uplatex

;(setq tex-command "/Library/TeX/texbin/ptex2pdf -l -ot '-synctex=1'");platex
;(setq tex-command "/Library/TeX/texbin/platex");platex

;(setq tex-command "xelatex -synctex=1");XeLatexでコンパイル
;(setq tex-command "/Library/TeX/texbin/latex");latex

;(setq bibtex-command "/Library/TeX/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
(setq bibtex-command (cond ((string-match "uplatex\\|-u" tex-command) "/Library/TeX/texbin/upbibtex")((string-match "platex" tex-command) "/Library/TeX/texbin/pbibtex")((string-match "lualatex\\|luajitlatex\\|xelatex" tex-command) "/Library/TeX/texbin/bibtexu")((string-match "pdflatex\\|latex" tex-command) "/Library/TeX/texbin/bibtex")(t "/Library/TeX/texbin/pbibtex")))


(setq makeindex-command (cond ((string-match "uplatex\\|-u" tex-command) "/Library/TeX/texbin/mendex")
			      ((string-match "platex" tex-command) "/Library/TeX/texbin/mendex")
			      ((string-match "lualatex\\|luajitlatex\\|xelatex" tex-command) "/Library/TeX/texbin/texindy")
			      ((string-match "pdflatex\\|latex" tex-command) "/Library/TeX/texbin/makeindex")
			      (t "/Library/TeX/texbin/mendex")))
  ;; (setq dvi2-command "/usr/bin/open -a Preview")
(setq dvi2-command "/usr/bin/open -a Skim")
(setq tex-pdfview-command "/usr/bin/open -a Skim")
(setq dviprint-command-format "/usr/bin/open -a \"Adobe Acrobat Reader DC\" `echo %s | gsed -e \"s/\\.[^.]*$/\\.pdf/\"`")

  (auto-fill-mode -1)
    #+end_src



 


*** terraform
    #+begin_src emacs-lisp
	    (use-package terraform-mode
	:hook (terraform-mode-hook . #'terraform-format-on-save-mode)
      )
    #+end_src


 

 

    
** Docker
**** [[https://github.com/Silex/docker.el][docker]]
     Emacs integration for docker, wheich run docker command from emacs.
     
     #+begin_src emacs-lisp
       (use-package docker
	 :ensure t
	 :bind ("C-c d" . docker))
     #+end_src


     
**** [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]
     
    #+begin_src emacs-lisp
    (use-package dockerfile-mode)
    #+end_src

**** docker 

** Projectile

   #+begin_src emacs-lisp

	  (use-package projectile
	    :diminish projectile-mode
	    :config (projectile-mode)
	    :custom ((projectile-completion-system 'ivy))
	    :bind-keymap
	    ("C-c p" . projectile-command-map)
	    :init
	    (when (file-directory-p "~/projects/code")
	      (setq projectile-project-search-path '("~/projects/code")))
	    (setq projectile-switch-project-action #'projectile-dired))

	  (use-package counsel-projectile
	    :config (counsel-projectile-mode))
   #+end_src   
  
** Terminals

*** term-mode
    
    #+begin_src emacs-lisp
      (use-package term
	:config
	(setq explicit-shell-file-name "zsh")
	;;(setq explicit-zsh-args '())
	(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
    #+end_src

*** For batter color support
    
    #+begin_src emacs-lisp
      (use-package eterm-256color
	:hook (term-mode . eterm-256color-mode))
    #+end_src

** [[https://github.com/magit/magit][Magit]]
   git interface.
   #+begin_src emacs-lisp
     (use-package magit
       :commands (magit-status magit-get-current-branch)
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src
   
   
   
